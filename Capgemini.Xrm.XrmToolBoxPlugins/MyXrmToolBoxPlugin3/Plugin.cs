using System;
using System.ComponentModel.Composition;
using System.IO;
using System.Linq;
using System.Collections.Generic;
using System.Reflection;
using XrmToolBox.Extensibility;
using XrmToolBox.Extensibility.Interfaces;

namespace MyXrmToolBoxPlugin3
{
    // Do not forget to update version number and author (company attribute) in AssemblyInfo.cs class
    // To generate Base64 string for Images below, you can use https://www.base64-image.de/
    [Export(typeof(IXrmToolBoxPlugin)),
        ExportMetadata("Name", "Capgemini Data Migrator"),
        ExportMetadata("Description", "Capgemini plugin for XRMToolbox to export/import CRM data, it can handle mass data thanks to batch processing and pagination. You can use SDK configuration migration tool schema or foder with custom fetchXML files"),
        // Please specify the base64 content of a 32x32 pixels image
        ExportMetadata("SmallImageBase64", "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"),
        // Please specify the base64 content of a 80x80 pixels image
        ExportMetadata("BigImageBase64", ""),
        ExportMetadata("BackgroundColor", "Lavender"),
        ExportMetadata("PrimaryFontColor", "Black"),
        ExportMetadata("SecondaryFontColor", "Gray")]
    public class Plugin : PluginBase
    {
        public override IXrmToolBoxPluginControl GetControl()
        {
            return new MyPluginControl();
        }

        /// <summary>
        /// Constructor 
        /// </summary>
        public Plugin()
        {
            // If you have external assemblies that you need to load, uncomment the following to 
            // hook into the event that will fire when an Assembly fails to resolve
            // AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(AssemblyResolveEventHandler);
        }

        /// <summary>
        /// Event fired by CLR when an assembly reference fails to load
        /// Assumes that related assemblies will be loaded from a subfolder named the same as the Plugin
        /// For example, a folder named Sample.XrmToolBox.MyPlugin 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="args"></param>
        /// <returns></returns>
        private Assembly AssemblyResolveEventHandler(object sender, ResolveEventArgs args)
        {
            Assembly loadAssembly = null;
            Assembly currAssembly = Assembly.GetExecutingAssembly();

            // base name of the assembly that failed to resolve
            var argName = args.Name.Substring(0, args.Name.IndexOf(","));

            // check to see if the failing assembly is one that we reference.
            List<AssemblyName> refAssemblies = currAssembly.GetReferencedAssemblies().ToList();
            var refAssembly = refAssemblies.Where(a => a.Name == argName).FirstOrDefault();

            // if the current unresolved assembly is referenced by our plugin, attempt to load
            if (refAssembly != null)
            {
                // load from the path to this plugin assembly, not host executable
                string dir = Path.GetDirectoryName(currAssembly.Location).ToLower();
                string folder = Path.GetFileNameWithoutExtension(currAssembly.Location);
                dir = Path.Combine(dir, folder);

                var assmbPath = Path.Combine(dir, $"{argName}.dll");

                if (File.Exists(assmbPath))
                {
                    loadAssembly = Assembly.LoadFrom(assmbPath);
                }
                else
                {
                    throw new FileNotFoundException($"Unable to locate dependency: {assmbPath}");
                }
            }

            return loadAssembly;
        }
    }
}